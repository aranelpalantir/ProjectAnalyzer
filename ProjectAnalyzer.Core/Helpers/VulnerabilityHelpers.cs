using System.Net.Http.Headers;
using Newtonsoft.Json.Linq;
using NuGet.Versioning;
using ProjectAnalyzer.Core.Models;

namespace ProjectAnalyzer.Core.Helpers
{
    public class VulnerabilityHelpers
    {
        private const string GitHubAdvisoryDatabaseUrl = "https://api.github.com/graphql";
        private readonly string _gitHubToken;
        public VulnerabilityHelpers(string gitHubToken)
        {
            _gitHubToken = gitHubToken;
        }

        private readonly Dictionary<string, List<Vulnerability>> _vulnerabilitiesCache = new();
        private async Task<List<Vulnerability>> GetVulnerabilitiesAsync(string packageName)
        {
            if (_vulnerabilitiesCache.TryGetValue(packageName, out var cachedVersion))
            {
                return cachedVersion;
            }
            var vulnerabilities = new List<Vulnerability>();

            using (var client = new HttpClient())
            {
                client.DefaultRequestHeaders.UserAgent.Add(new ProductInfoHeaderValue("ProjectAnalyzer", "1.0"));
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _gitHubToken);

                var query = @"
                {
                    securityVulnerabilities(ecosystem: NUGET, package: """ + packageName + @""", first: 100) {
                        edges {
                            node {
                                vulnerableVersionRange
                                severity
                                advisory {
                                    summary
                                }
                            }
                        }
                    }
                }";

                var content = new StringContent("{\"query\":\"" + query.Replace("\n", "").Replace("\r", "").Replace("\"", "\\\"") + "\"}", System.Text.Encoding.UTF8, "application/json");
                var response = await client.PostAsync(GitHubAdvisoryDatabaseUrl, content);

                if (response.IsSuccessStatusCode)
                {
                    var responseString = await response.Content.ReadAsStringAsync();
                    var jsonResponse = JObject.Parse(responseString);
                    var data = jsonResponse["data"];
                    if (data != null)
                    {
                        var vulnerabilitiesNodes = data["securityVulnerabilities"]["edges"];
                        foreach (var node in vulnerabilitiesNodes)
                        {
                            var vulnerability = new Vulnerability
                            {
                                VersionRange = node["node"]["vulnerableVersionRange"].ToString(),
                                Severity = node["node"]["severity"].ToString(),
                                Summary = node["node"]["advisory"]["summary"].ToString()
                            };
                            vulnerabilities.Add(vulnerability);
                        }
                    }
                }
            }
            _vulnerabilitiesCache[packageName] = vulnerabilities;

            return vulnerabilities;
        }
        public async Task<List<Vulnerability>> GetVulnerabilitiesAsync(string packageName, string version)
        {
            if (string.IsNullOrWhiteSpace(_gitHubToken))
                return new List<Vulnerability>();

            var vulnerabilities = await GetVulnerabilitiesAsync(packageName);
            var packageVulnerabilities = new List<Vulnerability>();

            foreach (var vulnerability in vulnerabilities)
            {
                if (VersionRange.TryParse(VersionHelpers.ConvertToNuGetVersionRange(vulnerability.VersionRange), out var range) && range.Satisfies(NuGetVersion.Parse(version)))
                {
                    packageVulnerabilities.Add(vulnerability);
                }
            }
            return packageVulnerabilities;
        }
    }
}
